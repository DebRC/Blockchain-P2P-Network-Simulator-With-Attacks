from models.transaction import Transaction
from models.block import Block

class Event:
    """
    Represents an event in a peer-to-peer network.

    Attributes:
    - time (float): Timestamp for the event.
    - type (int): Event Type (See Below).
    - txn (int,optional): Transaction Object associated with the event.
    - block (int,optional): Block Object associated with the event.
    - senderPeer (Node,optional): Sender Node Object associated with the event.
    - receiverPeer (Node,optional): Receiver Node Object associated with the event.

    EVENT_TYPES:
        0 - Txn is Generated by a Node\n
        1 - Txn Sent from a Node to its Peers\n
        2 - Start Mining a Block\n
        3 - Finish Mining a Block\n
        4 - Receive a Block\n

    Methods:
    - __init__(time, type, txn=None, block=None, senderPeer=None, receiverPeer=None): Initializes an Event object.
    - __str__(): Returns a human-readable string representation of the event.
    """
    def __init__(
        self,
        time: float,
        type: int=0,
        txn: Transaction = None,
        block: Block = None,
        senderPeer = None,
        receiverPeer = None,
    ):
        """
        Initializes an Event object.
        """
        self.time: float = time
        self.type: int = type
        self.txn: Transaction = txn
        self.block: Block = block
        self.senderPeer = senderPeer
        self.receiverPeer = receiverPeer

    def __str__(self):
        """
        Returns a String Representation of the Transaction object.
        """
        res="Event Details ::\n"
        res+="Time:"+str(self.time)+"\n"
        res+="Type:"+str(self.type)+"\n"
        if self.txn:
            res+="Transaction:"+str(self.txn)+"\n"
        if self.block:
            res+="Block:"+str(self.block)+"\n"
        if self.senderPeer:
            res+="SenderPeer:"+str(self.senderPeer.nodeID)+"\n"
        if self.receiverPeer:
            res+="ReceiverPeer:"+str(self.receiverPeer.nodeID)+"\n"
        return res
    
    def __lt__(self, other):
        # Compare events based on their time attribute
        return self.time <= other.time
